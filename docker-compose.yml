# ========================================
# Docker Compose - Complete Setup
# Includes: Database, Backend, Frontend, Migrations, Testing
# ========================================

services:
  # ========================================
  # PostgreSQL Database
  # ========================================
  postgres:
    image: postgres:15-alpine
    container_name: nusantara-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: nusantara_construction
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      TZ: Asia/Jakarta
      PGTZ: Asia/Jakarta
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - nusantara-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d nusantara_construction"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ========================================
  # Backend API (Development with Hot Reload)
  # ========================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend.dev
    container_name: nusantara-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      TZ: Asia/Jakarta
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: nusantara_construction
      DB_USERNAME: admin
      DB_PASSWORD: admin123
      DB_DIALECT: postgres
      # Security
      JWT_SECRET: nusantara-jwt-secret-2025
      # Server
      PORT: 5000
      # Firebase (Push Notifications) - Optional
      FIREBASE_SERVICE_ACCOUNT_PATH: ./config/firebase-service-account.json
      FIREBASE_PROJECT_ID: nusantara-yk-construction
      # Email (Nodemailer) - Optional
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASS: ${SMTP_PASS:-}
      APP_NAME: "Nusantara YK Construction"
      # SMS (Twilio) - Optional
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID:-}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN:-}
      TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER:-}
      # Logging
      LOG_LEVEL: debug
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - backend_node_modules:/app/node_modules
      - ./uploads:/app/uploads
      - ./backend/logs:/app/logs
    networks:
      - nusantara-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: npm run dev

  # ========================================
  # Frontend React App (Production Build)
  # ========================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.simple
    container_name: nusantara-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      REACT_APP_API_URL: http://localhost:5000
      GENERATE_SOURCEMAP: "false"
      DISABLE_ESLINT_PLUGIN: "true"
      # Firebase config for push notifications
      REACT_APP_FIREBASE_API_KEY: ${REACT_APP_FIREBASE_API_KEY:-}
      REACT_APP_FIREBASE_PROJECT_ID: ${REACT_APP_FIREBASE_PROJECT_ID:-}
      REACT_APP_FIREBASE_SENDER_ID: ${REACT_APP_FIREBASE_SENDER_ID:-}
      REACT_APP_FIREBASE_APP_ID: ${REACT_APP_FIREBASE_APP_ID:-}
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/package.json:/app/package.json
      - ./frontend/craco.config.js:/app/craco.config.js
      - frontend_node_modules:/app/node_modules
    networks:
      - nusantara-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://0.0.0.0:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: sh -c "if [ ! -f build/index.html ]; then react-scripts build; fi && npx serve -s build -l 3000"

  # ========================================
  # Migration Runner (One-time execution)
  # ========================================
  migrations:
    build:
      context: .
      dockerfile: Dockerfile.backend.dev
    container_name: nusantara-migrations
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: nusantara_construction
      DB_USERNAME: admin
      DB_PASSWORD: admin123
      DB_DIALECT: postgres
    volumes:
      - ./backend:/app
      - backend_node_modules:/app/node_modules
    networks:
      - nusantara-network
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        echo 'ðŸ”„ Waiting for database to be ready...' &&
        sleep 5 &&
        echo 'ðŸ“Š Running migrations...' &&
        npx sequelize-cli db:migrate &&
        echo 'âœ… Migrations completed!' &&
        exit 0
      "
    profiles:
      - tools

  # ========================================
  # Database Seeder (One-time execution)
  # ========================================
  seed:
    build:
      context: .
      dockerfile: Dockerfile.backend.dev
    container_name: nusantara-seed
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: nusantara_construction
      DB_USERNAME: admin
      DB_PASSWORD: admin123
      DB_DIALECT: postgres
    volumes:
      - ./backend:/app
      - backend_node_modules:/app/node_modules
    networks:
      - nusantara-network
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        echo 'ðŸŒ± Running seeders...' &&
        npx sequelize-cli db:seed:all &&
        echo 'âœ… Seeding completed!'
      "
    profiles:
      - tools

  # ========================================
  # Test Runner (API & Integration Tests)
  # ========================================
  test:
    build:
      context: .
      dockerfile: Dockerfile.backend.dev
    container_name: nusantara-test
    environment:
      NODE_ENV: test
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: nusantara_construction_test
      DB_USERNAME: admin
      DB_PASSWORD: admin123
      DB_DIALECT: postgres
      JWT_SECRET: test-secret
    volumes:
      - ./backend:/app
      - backend_node_modules:/app/node_modules
    networks:
      - nusantara-network
    depends_on:
      postgres:
        condition: service_healthy
    command: npm test
    profiles:
      - tools

  # ========================================
  # PgAdmin (Database Management UI)
  # ========================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: nusantara-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@nusantara.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - nusantara-network
    depends_on:
      - postgres
    profiles:
      - tools

# ========================================
# Networks
# ========================================
networks:
  nusantara-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# ========================================
# Volumes
# ========================================
volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  backend_node_modules:
    driver: local
  frontend_node_modules:
    driver: local
