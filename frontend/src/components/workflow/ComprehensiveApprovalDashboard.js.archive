import React, { useState, useEffect, createElement } from 'react';
import { 
  ClipboardCheck, 
  Clock, 
  CheckCircle, 
  XCircle, 
  AlertTriangle,
  User,
  Calendar,
  MessageSquare,
  ArrowRight,
  RefreshCw,
  Eye,
  ThumbsUp,
  ThumbsDown,
  AlertCircle,
  FileText,
  Download,
  ArrowLeft,
  Building2,
  ShoppingCart,
  Hammer,
  FileBarChart,
  TrendingUp,
  Users,
  DollarSign,
  Package,
  Truck,
  Settings,
  Filter
} from 'lucide-react';
import apiService from '../../services/api';

const ComprehensiveApprovalDashboard = ({ projectId, project, userDetails, onDataChange }) => {
  const [approvalData, setApprovalData] = useState({
    rab: [],
    purchaseOrders: [],
    workOrders: [],
    changeOrders: [],
    materialRequests: [],
    progressPayments: [],
    contractVariations: []
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [activeCategory, setActiveCategory] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [selectedApproval, setSelectedApproval] = useState(null);
  const [showModal, setShowModal] = useState(false);

  // Approval Categories Configuration
  const approvalCategories = [
    {
      id: 'all',
      name: 'Semua Approval',
      icon: ClipboardCheck,
      color: 'bg-gray-100 text-gray-800',
      description: 'Semua item yang memerlukan persetujuan'
    },
    {
      id: 'rab',
      name: 'RAB & BOQ',
      icon: FileBarChart,
      color: 'bg-blue-100 text-blue-800',
      description: 'Rencana Anggaran Biaya & Bill of Quantities'
    },
    {
      id: 'purchaseOrders',
      name: 'Purchase Orders',
      icon: ShoppingCart,
      color: 'bg-green-100 text-green-800',
      description: 'Pemesanan material dan equipment'
    },
    {
      id: 'workOrders',
      name: 'Work Orders',
      icon: Hammer,
      color: 'bg-orange-100 text-orange-800',
      description: 'Perintah kerja dan assignment'
    },
    {
      id: 'changeOrders',
      name: 'Change Orders',
      icon: AlertTriangle,
      color: 'bg-yellow-100 text-yellow-800',
      description: 'Perubahan kontrak dan variasi'
    },
    {
      id: 'materialRequests',
      name: 'Material Requests',
      icon: Package,
      color: 'bg-purple-100 text-purple-800',
      description: 'Permintaan material dari site'
    },
    {
      id: 'progressPayments',
      name: 'Progress Payments',
      icon: DollarSign,
      color: 'bg-indigo-100 text-indigo-800',
      description: 'Pembayaran berdasarkan progress'
    },
    {
      id: 'contractVariations',
      name: 'Contract Variations',
      icon: FileText,
      color: 'bg-red-100 text-red-800',
      description: 'Variasi kontrak dan addendum'
    }
  ];

  // Status Configuration
  const statusConfig = {
    'draft': { 
      label: 'Draft', 
      color: 'bg-gray-100 text-gray-800', 
      icon: FileText,
      description: 'Masih dalam tahap persiapan'
    },
    'pending': { 
      label: 'Pending Approval', 
      color: 'bg-yellow-100 text-yellow-800', 
      icon: Clock,
      description: 'Menunggu persetujuan'
    },
    'under_review': { 
      label: 'Under Review', 
      color: 'bg-blue-100 text-blue-800', 
      icon: Eye,
      description: 'Sedang dalam review'
    },
    'approved': { 
      label: 'Approved', 
      color: 'bg-green-100 text-green-800', 
      icon: CheckCircle,
      description: 'Telah disetujui'
    },
    'rejected': { 
      label: 'Rejected', 
      color: 'bg-red-100 text-red-800', 
      icon: XCircle,
      description: 'Ditolak'
    },
    'revision_required': { 
      label: 'Revision Required', 
      color: 'bg-orange-100 text-orange-800', 
      icon: AlertTriangle,
      description: 'Perlu revisi'
    },
    'completed': { 
      label: 'Completed', 
      color: 'bg-green-100 text-green-800', 
      icon: CheckCircle,
      description: 'Selesai'
    }
  };

  // Approval Matrix Configuration
  const approvalMatrix = {
    'rab': {
      thresholds: [
        { max: 50000000, roles: ['Site Engineer', 'Project Manager'] },
        { max: 200000000, roles: ['Site Engineer', 'Project Manager', 'Area Manager'] },
        { max: 500000000, roles: ['Site Engineer', 'Project Manager', 'Area Manager', 'Operations Director'] },
        { max: Infinity, roles: ['Site Engineer', 'Project Manager', 'Area Manager', 'Operations Director', 'Finance Director'] }
      ]
    },
    'purchaseOrders': {
      thresholds: [
        { max: 25000000, roles: ['Project Manager'] },
        { max: 100000000, roles: ['Project Manager', 'Area Manager'] },
        { max: 300000000, roles: ['Project Manager', 'Area Manager', 'Operations Director'] },
        { max: Infinity, roles: ['Project Manager', 'Area Manager', 'Operations Director', 'Finance Director'] }
      ]
    },
    'changeOrders': {
      thresholds: [
        { max: 100000000, roles: ['Project Manager', 'Client Representative'] },
        { max: 500000000, roles: ['Project Manager', 'Area Manager', 'Client Representative'] },
        { max: Infinity, roles: ['Project Manager', 'Area Manager', 'Operations Director', 'Client Representative', 'Finance Director'] }
      ]
    }
  };

  useEffect(() => {
    loadComprehensiveApprovalData();
  }, [projectId]);

  const loadComprehensiveApprovalData = async () => {
    setLoading(true);
    setError(null);
    
    try {
      console.log('=== LOADING COMPREHENSIVE APPROVAL DATA ===');
      console.log('ProjectId:', projectId);
      
      // Load all approval types in parallel
      const [
        rabResponse,
        poResponse,
        workOrderResponse,
        changeOrderResponse,
        materialRequestResponse,
        progressPaymentResponse,
        contractVariationResponse
      ] = await Promise.allSettled([
        loadRABApprovals(),
        loadPurchaseOrderApprovals(),
        loadWorkOrderApprovals(),
        loadChangeOrderApprovals(),
        loadMaterialRequestApprovals(),
        loadProgressPaymentApprovals(),
        loadContractVariationApprovals()
      ]);

      const newApprovalData = {
        rab: rabResponse.status === 'fulfilled' ? rabResponse.value : [],
        purchaseOrders: poResponse.status === 'fulfilled' ? poResponse.value : [],
        workOrders: workOrderResponse.status === 'fulfilled' ? workOrderResponse.value : [],
        changeOrders: changeOrderResponse.status === 'fulfilled' ? changeOrderResponse.value : [],
        materialRequests: materialRequestResponse.status === 'fulfilled' ? materialRequestResponse.value : [],
        progressPayments: progressPaymentResponse.status === 'fulfilled' ? progressPaymentResponse.value : [],
        contractVariations: contractVariationResponse.status === 'fulfilled' ? contractVariationResponse.value : []
      };

      console.log('Comprehensive approval data loaded:', newApprovalData);
      setApprovalData(newApprovalData);
      
    } catch (error) {
      console.error('Error loading comprehensive approval data:', error);
      setError('Gagal memuat data approval. Silakan coba lagi.');
    } finally {
      setLoading(false);
    }
  };

  // Individual data loaders
  const loadRABApprovals = async () => {
    try {
      const response = await apiService.post('/database/query', {
        query: `
          SELECT 
            'RAB-' || id as approval_id,
            'rab' as approval_type,
            category,
            description,
            quantity,
            "unitPrice" as unit_price,
            "totalPrice" as total_price,
            "isApproved",
            "approvedBy" as approved_by,
            "approvedAt" as approved_at,
            "createdAt" as created_at,
            "updatedAt" as updated_at,
            notes,
            CASE 
              WHEN "isApproved" = true THEN 'approved'
              WHEN "approvedBy" IS NOT NULL THEN 'under_review'
              ELSE 'pending'
            END as status
          FROM project_rab 
          WHERE "projectId" = $1
          ORDER BY "createdAt" DESC
        `,
        params: [projectId]
      });
      
      return response.data.data || [];
    } catch (error) {
      console.error('Error loading RAB approvals:', error);
      return [];
    }
  };

  const loadPurchaseOrderApprovals = async () => {
    try {
      const response = await apiService.post('/database/query', {
        query: `
          SELECT 
            'PO-' || id as approval_id,
            'purchaseOrders' as approval_type,
            po_number,
            supplier_name,
            supplier_id,
            status,
            total_amount,
            order_date as created_at,
            expected_delivery_date,
            approved_by,
            approved_at,
            delivery_address,
            notes,
            items
          FROM purchase_orders 
          WHERE project_id = $1
          ORDER BY order_date DESC
        `,
        params: [projectId]
      });
      
      return response.data.data || [];
    } catch (error) {
      console.error('Error loading PO approvals:', error);
      return [];
    }
  };

  const loadWorkOrderApprovals = async () => {
    // For now, return sample data until work_orders table is implemented
    return [
      {
        approval_id: 'WO-001',
        approval_type: 'workOrders',
        wo_number: 'WO-2025-001-FOUNDATION',
        work_type: 'Foundation Work',
        assigned_to: 'PT. Subkontraktor Pondasi',
        total_amount: 125000000,
        status: 'pending',
        created_at: '2025-09-10T08:00:00Z',
        expected_completion: '2025-10-30T17:00:00Z',
        description: 'Pekerjaan pondasi gedung utama',
        notes: 'Sesuai gambar teknik rev. 02'
      }
    ];
  };

  const loadChangeOrderApprovals = async () => {
    // Sample data for change orders
    return [
      {
        approval_id: 'CO-001',
        approval_type: 'changeOrders',
        co_number: 'CO-2025-001-DESIGN',
        change_type: 'Design Modification',
        impact_cost: 75000000,
        impact_schedule: '+14 days',
        status: 'pending',
        created_at: '2025-09-12T10:30:00Z',
        description: 'Perubahan desain fasad berdasarkan permintaan owner',
        justification: 'Peningkatan aesthetic value dan marketability',
        notes: 'Memerlukan approval owner dan konsultan'
      }
    ];
  };

  const loadMaterialRequestApprovals = async () => {
    // Sample data for material requests
    return [
      {
        approval_id: 'MR-001',
        approval_type: 'materialRequests',
        mr_number: 'MR-2025-001-SEMEN',
        material_type: 'Cement & Aggregates',
        requested_by: 'Site Engineer',
        total_amount: 45000000,
        status: 'approved',
        created_at: '2025-09-11T14:15:00Z',
        approved_at: '2025-09-12T09:00:00Z',
        urgent: true,
        description: 'Material untuk cor lantai basement',
        notes: 'Diperlukan segera untuk memenuhi schedule'
      }
    ];
  };

  const loadProgressPaymentApprovals = async () => {
    // Sample data for progress payments
    return [
      {
        approval_id: 'PP-001',
        approval_type: 'progressPayments',
        pp_number: 'PP-2025-001-TERMIN-02',
        payment_type: 'Progress Payment',
        progress_percentage: 35,
        amount: 2800000000,
        status: 'under_review',
        created_at: '2025-09-13T16:00:00Z',
        description: 'Pembayaran termin 2 - Penyelesaian struktur basement',
        notes: 'Progress verified by quantity surveyor',
        previous_payment: 1200000000,
        cumulative_payment: 4000000000
      }
    ];
  };

  const loadContractVariationApprovals = async () => {
    // Sample data for contract variations
    return [
      {
        approval_id: 'CV-001',
        approval_type: 'contractVariations',
        cv_number: 'CV-2025-001-ADDITIONAL',
        variation_type: 'Additional Work',
        contract_impact: 150000000,
        time_impact: '+21 days',
        status: 'revision_required',
        created_at: '2025-09-08T11:20:00Z',
        description: 'Penambahan pekerjaan landscaping area parkir',
        justification: 'Kebutuhan tambahan berdasarkan site condition',
        notes: 'Perlu justifikasi teknis yang lebih detail'
      }
    ];
  };

  // Helper functions
  const formatCurrency = (amount) => {
    if (!amount) return 'Rp 0';
    return new Intl.NumberFormat('id-ID', {
      style: 'currency',
      currency: 'IDR',
      minimumFractionDigits: 0
    }).format(amount);
  };

  const formatDate = (dateString) => {
    if (!dateString) return '-';
    return new Date(dateString).toLocaleDateString('id-ID', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  const getStatusConfig = (status) => {
    return statusConfig[status] || statusConfig['draft'];
  };

  // Get all approvals in a unified format
  const getAllApprovals = () => {
    const allApprovals = [];
    
    Object.entries(approvalData).forEach(([category, items]) => {
      if (activeCategory === 'all' || activeCategory === category) {
        items.forEach(item => {
          allApprovals.push({
            ...item,
            category: category,
            categoryConfig: approvalCategories.find(cat => cat.id === category)
          });
        });
      }
    });

    return allApprovals.filter(item => {
      const matchesStatus = statusFilter === 'all' || item.status === statusFilter;
      const matchesSearch = !searchTerm || 
        (item.description && item.description.toLowerCase().includes(searchTerm.toLowerCase())) ||
        (item.po_number && item.po_number.toLowerCase().includes(searchTerm.toLowerCase())) ||
        (item.wo_number && item.wo_number.toLowerCase().includes(searchTerm.toLowerCase())) ||
        (item.co_number && item.co_number.toLowerCase().includes(searchTerm.toLowerCase()));
      
      return matchesStatus && matchesSearch;
    });
  };

  // Get approval statistics
  const getApprovalStats = () => {
    const allApprovals = getAllApprovals();
    
    return {
      total: allApprovals.length,
      pending: allApprovals.filter(item => item.status === 'pending').length,
      approved: allApprovals.filter(item => item.status === 'approved').length,
      rejected: allApprovals.filter(item => item.status === 'rejected').length,
      underReview: allApprovals.filter(item => item.status === 'under_review').length,
      totalValue: allApprovals.reduce((sum, item) => {
        const amount = item.total_amount || item.total_price || item.amount || item.contract_impact || 0;
        return sum + parseFloat(amount);
      }, 0)
    };
  };

  const stats = getApprovalStats();
  const filteredApprovals = getAllApprovals();

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
        <span className="ml-3 text-gray-600">Loading comprehensive approval data...</span>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="py-4 sm:py-6">
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
              <div className="min-w-0 flex-1">
                <h1 className="text-xl sm:text-2xl font-bold text-gray-900 truncate">
                  Approval Dashboard
                </h1>
                <p className="mt-1 text-sm text-gray-500 truncate">
                  Monitor workflow approval proyek konstruksi
                </p>
              </div>
              <div className="flex flex-col sm:flex-row gap-2 sm:gap-3">
                <button
                  onClick={loadComprehensiveApprovalData}
                  className="inline-flex items-center justify-center px-3 py-2 text-sm border border-gray-300 rounded-md hover:bg-gray-50 transition-colors"
                >
                  <RefreshCw className="h-4 w-4 mr-2" />
                  Refresh
                </button>
                <button className="inline-flex items-center justify-center px-3 py-2 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                  <Download className="h-4 w-4 mr-2" />
                  Export
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 sm:py-8">
        {/* Statistics Cards */}
        <div className="grid grid-cols-2 lg:grid-cols-6 gap-3 sm:gap-4 mb-6 sm:mb-8">
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4 sm:p-6">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <ClipboardCheck className="h-6 w-6 sm:h-8 sm:w-8 text-blue-600" />
              </div>
              <div className="ml-3 sm:ml-5 min-w-0 flex-1">
                <dl>
                  <dt className="text-xs sm:text-sm font-medium text-gray-500 truncate">Total</dt>
                  <dd className="text-base sm:text-lg font-semibold text-gray-900">{stats.total}</dd>
                </dl>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4 sm:p-6">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <Clock className="h-6 w-6 sm:h-8 sm:w-8 text-yellow-600" />
              </div>
              <div className="ml-3 sm:ml-5 min-w-0 flex-1">
                <dl>
                  <dt className="text-xs sm:text-sm font-medium text-gray-500 truncate">Pending</dt>
                  <dd className="text-base sm:text-lg font-semibold text-gray-900">{stats.pending}</dd>
                </dl>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4 sm:p-6">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <Eye className="h-6 w-6 sm:h-8 sm:w-8 text-blue-600" />
              </div>
              <div className="ml-3 sm:ml-5 min-w-0 flex-1">
                <dl>
                  <dt className="text-xs sm:text-sm font-medium text-gray-500 truncate">Review</dt>
                  <dd className="text-base sm:text-lg font-semibold text-gray-900">{stats.underReview}</dd>
                </dl>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4 sm:p-6">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <CheckCircle className="h-6 w-6 sm:h-8 sm:w-8 text-green-600" />
              </div>
              <div className="ml-3 sm:ml-5 min-w-0 flex-1">
                <dl>
                  <dt className="text-xs sm:text-sm font-medium text-gray-500 truncate">Approved</dt>
                  <dd className="text-base sm:text-lg font-semibold text-gray-900">{stats.approved}</dd>
                </dl>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4 sm:p-6">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <XCircle className="h-6 w-6 sm:h-8 sm:w-8 text-red-600" />
              </div>
              <div className="ml-3 sm:ml-5 min-w-0 flex-1">
                <dl>
                  <dt className="text-xs sm:text-sm font-medium text-gray-500 truncate">Rejected</dt>
                  <dd className="text-base sm:text-lg font-semibold text-gray-900">{stats.rejected}</dd>
                </dl>
              </div>
            </div>
          </div>

          <div className="col-span-2 lg:col-span-1 bg-white rounded-lg shadow-sm border border-gray-200 p-4 sm:p-6">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <DollarSign className="h-6 w-6 sm:h-8 sm:w-8 text-green-600" />
              </div>
              <div className="ml-3 sm:ml-5 min-w-0 flex-1">
                <dl>
                  <dt className="text-xs sm:text-sm font-medium text-gray-500 truncate">Total Value</dt>
                  <dd className="text-base sm:text-lg font-semibold text-gray-900 truncate">
                    {formatCurrency(stats.totalValue).substring(0, 8)}...
                  </dd>
                </dl>
              </div>
            </div>
          </div>
        </div>

        {/* Category Filter Tabs - Responsive */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 mb-6">
          {/* Mobile Category Selector */}
          <div className="block sm:hidden">
            <div className="px-4 py-3 border-b border-gray-200">
              <label htmlFor="category-select" className="sr-only">
                Select Category
              </label>
              <select
                id="category-select"
                value={activeCategory}
                onChange={(e) => setActiveCategory(e.target.value)}
                className="block w-full rounded-md border-gray-300 text-sm focus:border-blue-500 focus:ring-blue-500"
              >
                {approvalCategories.map((category) => {
                  const categoryCount = category.id === 'all' 
                    ? stats.total 
                    : approvalData[category.id]?.length || 0;
                  
                  return (
                    <option key={category.id} value={category.id}>
                      {category.name} ({categoryCount})
                    </option>
                  );
                })}
              </select>
            </div>
          </div>

          {/* Desktop Category Tabs */}
          <div className="hidden sm:block">
            <div className="border-b border-gray-200">
              <nav className="-mb-px flex space-x-4 lg:space-x-6 xl:space-x-8 px-4 sm:px-6 overflow-x-auto scrollbar-hide" aria-label="Tabs">
                {approvalCategories.map((category) => {
                  const CategoryIcon = category.icon;
                  const isActive = activeCategory === category.id;
                  const categoryCount = category.id === 'all' 
                    ? stats.total 
                    : approvalData[category.id]?.length || 0;
                  
                  return (
                    <button
                      key={category.id}
                      onClick={() => setActiveCategory(category.id)}
                      className={`${
                        isActive
                          ? 'border-blue-500 text-blue-600'
                          : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                      } whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm flex items-center transition-colors`}
                    >
                      <CategoryIcon className="h-4 w-4 mr-2 flex-shrink-0" />
                      <span className="truncate">{category.name}</span>
                      <span className={`ml-2 px-2 py-0.5 text-xs rounded-full ${category.color} flex-shrink-0`}>
                        {categoryCount}
                      </span>
                    </button>
                  );
                })}
              </nav>
            </div>
          </div>

          {/* Filter Controls */}
          <div className="p-4 sm:p-6 border-b border-gray-200">
            <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
              <div className="flex-1 min-w-0">
                <input
                  type="text"
                  placeholder="Cari approval berdasarkan deskripsi, nomor..."
                  className="block w-full rounded-md border-gray-300 text-sm focus:border-blue-500 focus:ring-blue-500"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
              </div>
              <div className="flex gap-3">
                <select
                  value={statusFilter}
                  onChange={(e) => setStatusFilter(e.target.value)}
                  className="block rounded-md border-gray-300 text-sm focus:border-blue-500 focus:ring-blue-500"
                >
                  <option value="all">Semua Status</option>
                  <option value="pending">Pending</option>
                  <option value="under_review">Under Review</option>
                  <option value="approved">Approved</option>
                  <option value="rejected">Rejected</option>
                  <option value="revision_required">Revision Required</option>
                </select>
              </div>
            </div>
          </div>
        </div>

        {/* Error state */}
        {error && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
            <div className="flex items-center">
              <AlertCircle className="h-5 w-5 text-red-500 mr-2 flex-shrink-0" />
              <span className="text-red-700 text-sm">{error}</span>
            </div>
          </div>
        )}

        {/* Approval List */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
          <div className="px-4 sm:px-6 py-4 border-b border-gray-200">
            <h3 className="text-lg font-medium text-gray-900">
              Approval Items ({filteredApprovals.length} items)
            </h3>
          </div>
          
          {filteredApprovals.length === 0 ? (
            <div className="text-center py-12">
              <ClipboardCheck className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-500">Tidak ada data approval yang ditemukan</p>
            </div>
          ) : (
            <div className="divide-y divide-gray-200">
              {filteredApprovals.map((item) => {
                const statusConfig = getStatusConfig(item.status);
                const StatusIcon = statusConfig.icon;
                const CategoryIcon = item.categoryConfig?.icon || FileText;
                
                return (
                  <div key={item.approval_id} className="p-4 sm:p-6 hover:bg-gray-50 transition-colors">
                    <div className="flex flex-col lg:flex-row lg:items-start lg:justify-between gap-4">
                      {/* Main Content */}
                      <div className="flex items-start space-x-3 sm:space-x-4 min-w-0 flex-1">
                        <div className={`flex-shrink-0 p-2 rounded-lg ${item.categoryConfig?.color || 'bg-gray-100'}`}>
                          <CategoryIcon className="h-5 w-5 sm:h-6 sm:w-6" />
                        </div>
                        <div className="min-w-0 flex-1">
                          <div className="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-3 mb-2">
                            <h4 className="text-base sm:text-lg font-medium text-gray-900 truncate">
                              {item.description || item.po_number || item.wo_number || item.co_number || 'No description'}
                            </h4>
                            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${statusConfig.color} whitespace-nowrap`}>
                              <StatusIcon className="h-3 w-3 mr-1 flex-shrink-0" />
                              {statusConfig.label}
                            </span>
                          </div>
                          
                          <div className="flex flex-wrap items-center gap-x-4 gap-y-2 text-xs sm:text-sm text-gray-500 mb-3">
                            <span className="flex items-center whitespace-nowrap">
                              <Calendar className="h-4 w-4 mr-1 flex-shrink-0" />
                              {formatDate(item.created_at)}
                            </span>
                            {(item.total_amount || item.total_price || item.amount || item.contract_impact) && (
                              <span className="flex items-center whitespace-nowrap">
                                <DollarSign className="h-4 w-4 mr-1 flex-shrink-0" />
                                {formatCurrency(item.total_amount || item.total_price || item.amount || item.contract_impact)}
                              </span>
                            )}
                            {item.approved_by && (
                              <span className="flex items-center whitespace-nowrap">
                                <User className="h-4 w-4 mr-1 flex-shrink-0" />
                                {item.approved_by}
                              </span>
                            )}
                          </div>
                          
                          {item.notes && (
                            <div className="bg-gray-50 rounded-md p-3 border border-gray-200">
                              <p className="text-sm text-gray-600 line-clamp-2">
                                {item.notes}
                              </p>
                            </div>
                          )}
                        </div>
                      </div>
                      
                      {/* Action Buttons */}
                      <div className="flex flex-row lg:flex-col gap-2 lg:items-end">
                        <button
                          onClick={() => {
                            setSelectedApproval(item);
                            setShowModal(true);
                          }}
                          className="flex items-center justify-center px-3 py-2 text-sm border border-gray-300 rounded-md hover:bg-gray-50 transition-colors whitespace-nowrap"
                        >
                          <Eye className="h-4 w-4 mr-1" />
                          Detail
                        </button>
                        
                        {item.status === 'pending' && (
                          <div className="flex gap-2">
                            <button className="flex items-center justify-center px-3 py-2 text-sm bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors whitespace-nowrap">
                              <ThumbsUp className="h-4 w-4 mr-1" />
                              <span className="hidden sm:inline">Approve</span>
                            </button>
                            <button className="flex items-center justify-center px-3 py-2 text-sm bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors whitespace-nowrap">
                              <ThumbsDown className="h-4 w-4 mr-1" />
                              <span className="hidden sm:inline">Reject</span>
                            </button>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </div>
      </div>

      {/* Approval Detail Modal */}
      {showModal && selectedApproval && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            {/* Modal Header */}
            <div className="flex items-center justify-between p-6 border-b border-gray-200">
              <div className="flex items-center space-x-3">
                <div className={`p-2 rounded-lg ${selectedApproval.categoryConfig?.color || 'bg-gray-100'}`}>
                  {selectedApproval.categoryConfig?.icon && 
                    React.createElement(selectedApproval.categoryConfig.icon, { className: "h-6 w-6" })
                  }
                </div>
                <div>
                  <h3 className="text-lg font-semibold text-gray-900">
                    Approval Detail
                  </h3>
                  <p className="text-sm text-gray-500">
                    {selectedApproval.categoryConfig?.name || 'Approval Item'}
                  </p>
                </div>
              </div>
              <button
                onClick={() => {
                  setShowModal(false);
                  setSelectedApproval(null);
                }}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <XCircle className="h-6 w-6" />
              </button>
            </div>

            {/* Modal Content */}
            <div className="p-6 overflow-y-auto max-h-[70vh]">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* Basic Information */}
                <div className="space-y-4">
                  <h4 className="text-sm font-semibold text-gray-900 uppercase tracking-wide">
                    Basic Information
                  </h4>
                  
                  <div className="bg-gray-50 rounded-lg p-4 space-y-3">
                    <div>
                      <label className="text-xs font-medium text-gray-500">Description</label>
                      <p className="text-sm text-gray-900 mt-1">
                        {selectedApproval.description || selectedApproval.po_number || 'No description'}
                      </p>
                    </div>
                    
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <label className="text-xs font-medium text-gray-500">Status</label>
                        <div className="mt-1">
                          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusConfig(selectedApproval.status).color}`}>
                            {getStatusConfig(selectedApproval.status).label}
                          </span>
                        </div>
                      </div>
                      
                      <div>
                        <label className="text-xs font-medium text-gray-500">Created Date</label>
                        <p className="text-sm text-gray-900 mt-1">
                          {formatDate(selectedApproval.created_at)}
                        </p>
                      </div>
                    </div>
                    
                    {(selectedApproval.total_amount || selectedApproval.total_price || selectedApproval.amount) && (
                      <div>
                        <label className="text-xs font-medium text-gray-500">Amount</label>
                        <p className="text-lg font-semibold text-gray-900 mt-1">
                          {formatCurrency(selectedApproval.total_amount || selectedApproval.total_price || selectedApproval.amount)}
                        </p>
                      </div>
                    )}
                  </div>
                </div>

                {/* Approval Information */}
                <div className="space-y-4">
                  <h4 className="text-sm font-semibold text-gray-900 uppercase tracking-wide">
                    Approval Information
                  </h4>
                  
                  <div className="bg-gray-50 rounded-lg p-4 space-y-3">
                    {selectedApproval.approved_by && (
                      <div>
                        <label className="text-xs font-medium text-gray-500">Approved By</label>
                        <p className="text-sm text-gray-900 mt-1">{selectedApproval.approved_by}</p>
                      </div>
                    )}
                    
                    {selectedApproval.approved_at && (
                      <div>
                        <label className="text-xs font-medium text-gray-500">Approved Date</label>
                        <p className="text-sm text-gray-900 mt-1">{formatDate(selectedApproval.approved_at)}</p>
                      </div>
                    )}
                    
                    <div>
                      <label className="text-xs font-medium text-gray-500">Category</label>
                      <p className="text-sm text-gray-900 mt-1">
                        {selectedApproval.categoryConfig?.description || 'General Approval'}
                      </p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Notes */}
              {selectedApproval.notes && (
                <div className="mt-6">
                  <h4 className="text-sm font-semibold text-gray-900 uppercase tracking-wide mb-3">
                    Notes
                  </h4>
                  <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                    <p className="text-sm text-gray-700">{selectedApproval.notes}</p>
                  </div>
                </div>
              )}

              {/* Items (for PO, etc.) */}
              {selectedApproval.items && selectedApproval.items.length > 0 && (
                <div className="mt-6">
                  <h4 className="text-sm font-semibold text-gray-900 uppercase tracking-wide mb-3">
                    Items
                  </h4>
                  <div className="overflow-x-auto">
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead className="bg-gray-50">
                        <tr>
                          <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Item
                          </th>
                          <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Quantity
                          </th>
                          <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Unit Price
                          </th>
                          <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Total
                          </th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {selectedApproval.items.map((item, index) => (
                          <tr key={index}>
                            <td className="px-4 py-3 text-sm text-gray-900">
                              {item.name || item.item_name}
                            </td>
                            <td className="px-4 py-3 text-sm text-gray-500">
                              {item.quantity} {item.unit}
                            </td>
                            <td className="px-4 py-3 text-sm text-gray-500">
                              {formatCurrency(item.unit_price || item.unitPrice)}
                            </td>
                            <td className="px-4 py-3 text-sm font-medium text-gray-900">
                              {formatCurrency(item.total_amount || item.totalAmount)}
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>
              )}
            </div>

            {/* Modal Footer */}
            <div className="flex items-center justify-end space-x-3 px-6 py-4 border-t border-gray-200 bg-gray-50">
              {selectedApproval.status === 'pending' && (
                <>
                  <button className="inline-flex items-center px-4 py-2 text-sm bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors">
                    <ThumbsUp className="h-4 w-4 mr-2" />
                    Approve
                  </button>
                  <button className="inline-flex items-center px-4 py-2 text-sm bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors">
                    <ThumbsDown className="h-4 w-4 mr-2" />
                    Reject
                  </button>
                  <button className="inline-flex items-center px-4 py-2 text-sm bg-yellow-600 text-white rounded-md hover:bg-yellow-700 transition-colors">
                    <AlertTriangle className="h-4 w-4 mr-2" />
                    Request Revision
                  </button>
                </>
              )}
              <button
                onClick={() => {
                  setShowModal(false);
                  setSelectedApproval(null);
                }}
                className="inline-flex items-center px-4 py-2 text-sm border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ComprehensiveApprovalDashboard;